// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var addFriendlyPath, cache$, cache$1, extensionError, fs, getFile, getFileAsync, getFiles, getFilesSync, getFileSync, getFriendlyPath, isFile, isFileSync, isString, readr;
  fs = require('fs');
  isString = require('./readr/utils').isString;
  getFriendlyPath = require('./readr/get_friendly_path');
  cache$ = require('./readr/get_files');
  getFile = cache$.getFile;
  getFileSync = cache$.getFileSync;
  getFiles = cache$.getFiles;
  getFilesSync = cache$.getFilesSync;
  cache$1 = require('./readr/fs_helpers');
  isFile = cache$1.isFile;
  isFileSync = cache$1.isFileSync;
  module.exports = readr = function (path, options, cb) {
    var extension;
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    extension = options.extension;
    return isFile(path, function (err, file) {
      if (null != err)
        return cb(err);
      if (file)
        return getFileAsync(path, options, cb);
      if (!isString(extension))
        throw extensionError();
      options.basePath = path;
      return getFiles(path, extension, function (err, files) {
        if (null != err)
          return cb(err);
        if (options.friendlyPath === false)
          return cb(null, files);
        return cb(null, files.map(function (file) {
          return addFriendlyPath(file, options);
        }));
      });
    });
  };
  getFileAsync = function (path, options, cb) {
    return getFile(path, function (err, file) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false) {
        return cb(null, [file]);
      } else {
        return cb(null, [addFriendlyPath(file, options)]);
      }
    });
  };
  readr.sync = function (path, options) {
    var extension, file, files;
    if (null == options)
      options = {};
    extension = options.extension;
    if (isFileSync(path)) {
      file = getFileSync(path);
      if (options.friendlyPath !== false)
        file = addFriendlyPath(getFileSync(path), options);
      return [file];
    }
    if (!isString(extension))
      throw extensionError();
    files = getFilesSync(path, extension);
    if (options.friendlyPath === false)
      return files;
    options.basePath = path;
    return files.map(function (file) {
      return addFriendlyPath(file, options);
    });
  };
  addFriendlyPath = function (file, options) {
    file.friendlyPath = getFriendlyPath(file.path, options);
    return file;
  };
  extensionError = function () {
    return new Error('Must provide an `extension` option if path argument is a directory');
  };
}.call(this);
