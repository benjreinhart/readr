// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var addFriendlyPath, cache$, File, getFiles, getFilesSync, getFriendlyPath, globber, Path, readr;
  Path = require('path');
  globber = require('globber');
  getFriendlyPath = require('./readr/friendly_path');
  cache$ = File = require('./readr/file');
  getFiles = cache$.getFiles;
  getFilesSync = cache$.getFilesSync;
  module.exports = readr = function (path, options, cb) {
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    options.includeDirectories = false;
    return getFiles(path, options, function (err, files) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false)
        return cb(null, files);
      return cb(null, files.map(function (file) {
        return addFriendlyPath(file, options);
      }));
    });
  };
  readr.sync = function (path, options) {
    var files;
    if (null == options)
      options = {};
    options.includeDirectories = false;
    files = getFilesSync(path, options);
    if (options.friendlyPath === false)
      return files;
    return files.map(function (file) {
      return addFriendlyPath(file, options);
    });
  };
  readr.getPaths = function (path, options, cb) {
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    options.includeDirectories = false;
    return File.glob(path, options, function (err, paths) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false)
        return cb(null, paths.map(function (path) {
          return { path: path };
        }));
      return cb(null, paths.map(function (path) {
        return addFriendlyPath({ path: path }, options);
      }));
    });
  };
  readr.getPathsSync = function (path, options) {
    var paths;
    if (null == options)
      options = {};
    options.includeDirectories = false;
    paths = File.glob.sync(path, options);
    if (options.friendlyPath === false)
      return paths.map(function (path) {
        return { path: path };
      });
    return paths.map(function (path) {
      return addFriendlyPath({ path: path }, options);
    });
  };
  addFriendlyPath = function (file, options) {
    file.friendlyPath = getFriendlyPath(file.path, options);
    return file;
  };
}.call(this);
