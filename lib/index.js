// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var addFriendlyPath, cache$, fsHelpers, getFile, getFileAsync, getFiles, getFilesSync, getFileSync, getFriendlyPath, isAbsolutePath, isString, Path, Paths, readr, resolveRelative;
  Path = require('path');
  Paths = require('./readr/paths');
  fsHelpers = require('./readr/fs_helpers');
  getFriendlyPath = require('./readr/friendly_path');
  isString = require('./readr/utils').isString;
  cache$ = require('./readr/files');
  getFile = cache$.getFile;
  getFileSync = cache$.getFileSync;
  getFiles = cache$.getFiles;
  getFilesSync = cache$.getFilesSync;
  module.exports = readr = function (path, options, cb) {
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    if (!isAbsolutePath(path))
      path = resolveRelative(path);
    if (fsHelpers.isFile(path))
      return getFileAsync(path, options, cb);
    options.basePath = path;
    getFiles(path, options, function (err, files) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false)
        return cb(null, files);
      return cb(null, files.map(function (file) {
        return addFriendlyPath(file, options);
      }));
    });
  };
  readr.sync = function (path, options) {
    var file, files;
    if (null == options)
      options = {};
    if (!isAbsolutePath(path))
      path = resolveRelative(path);
    if (fsHelpers.isFile(path)) {
      file = getFileSync(path);
      if (options.friendlyPath !== false)
        file = addFriendlyPath(getFileSync(path), options);
      return [file];
    }
    files = getFilesSync(path, options);
    if (options.friendlyPath === false)
      return files;
    options.basePath = path;
    return files.map(function (file) {
      return addFriendlyPath(file, options);
    });
  };
  readr.getPaths = function (path, options, cb) {
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    if (!isAbsolutePath(path))
      path = resolveRelative(path);
    Paths.getPaths(path, options, function (err, paths) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false)
        return cb(null, paths.map(function (path) {
          return { path: path };
        }));
      options.basePath = path;
      return cb(null, paths.map(function (path) {
        return addFriendlyPath({ path: path }, options);
      }));
    });
  };
  readr.getPathsSync = function (path, options) {
    var paths;
    if (null == options)
      options = {};
    if (!isAbsolutePath(path))
      path = resolveRelative(path);
    paths = Paths.getPathsSync(path, options);
    if (options.friendlyPath === false)
      return paths.map(function (path) {
        return { path: path };
      });
    options.basePath = path;
    return paths.map(function (path) {
      return addFriendlyPath({ path: path }, options);
    });
  };
  getFileAsync = function (path, options, cb) {
    return getFile(path, function (err, file) {
      if (null != err)
        return cb(err);
      if (options.friendlyPath === false) {
        return cb(null, [file]);
      } else {
        return cb(null, [addFriendlyPath(file, options)]);
      }
    });
  };
  resolveRelative = function (cwd) {
    return function (path) {
      return Path.resolve(cwd, path);
    };
  }(process.cwd());
  isAbsolutePath = function (path) {
    return /^\//.test(path);
  };
  addFriendlyPath = function (file, options) {
    file.friendlyPath = getFriendlyPath(file.path, options);
    return file;
  };
}.call(this);
